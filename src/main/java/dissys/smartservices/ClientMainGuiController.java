package dissys.smartservices;

import grpc.generated.chore.ReportRequest;
import grpc.generated.flight.CO2Request;
import grpc.generated.monitoring.MonitoringRequest;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tsogzolmaa;
 */
public class ClientMainGuiController extends javax.swing.JFrame {

    /**
     * Creates new form ClientMainGuiController
     */
    public ClientMainGuiController() {
        initComponents();
    }

    public static ExceptionHandling myE = new ExceptionHandling();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SmartServices = new javax.swing.JTabbedPane();
        ChoreDivider = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        serviceTextArea = new javax.swing.JTextArea();
        NumPeopleLabel = new javax.swing.JLabel();
        numPeopleTextField = new javax.swing.JTextField();
        ResultLabel = new javax.swing.JLabel();
        NumPeopleButton = new javax.swing.JButton();
        StartButtom = new javax.swing.JButton();
        idlabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CompletedTaskNumTextField = new javax.swing.JTextField();
        ReportButton1 = new javax.swing.JButton();
        FinalReportButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        FlightEmissionCalculator = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        service2TextArea = new javax.swing.JTextArea();
        ResultLabel1 = new javax.swing.JLabel();
        StartButton = new javax.swing.JButton();
        NextCityLabel = new javax.swing.JLabel();
        SupportedCityLabel = new javax.swing.JLabel();
        NextCityNameTextField = new javax.swing.JTextField();
        NextCityNameEnterButton = new javax.swing.JButton();
        CompletedButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        StoreMonitoring = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        service3TextArea = new javax.swing.JTextArea();
        ResultLabel2 = new javax.swing.JLabel();
        StartButton1 = new javax.swing.JButton();
        SectionNameLabel = new javax.swing.JLabel();
        EnterButton = new javax.swing.JButton();
        SectionNameTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ChoreDivider: Unary and Client streaming services");

        serviceTextArea.setColumns(20);
        serviceTextArea.setRows(5);
        jScrollPane1.setViewportView(serviceTextArea);

        NumPeopleLabel.setText("Enter the number of people");

        numPeopleTextField.setText(" ");
        numPeopleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPeopleTextFieldActionPerformed(evt);
            }
        });

        ResultLabel.setText("Output");

        NumPeopleButton.setText("ENTER");
        NumPeopleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumPeopleButtonActionPerformed(evt);
            }
        });

        StartButtom.setText("START SERVER");
        StartButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtomActionPerformed(evt);
            }
        });

        idlabel.setText("Enter ID of completed task one by one");

        jLabel5.setText("ID is between 1-11 inclusive");

        CompletedTaskNumTextField.setText(" ");
        CompletedTaskNumTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletedTaskNumTextFieldActionPerformed(evt);
            }
        });

        ReportButton1.setText("SEND");
        ReportButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportButton1ActionPerformed(evt);
            }
        });

        FinalReportButton.setText("GET REPORT AND END");
        FinalReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalReportButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Get report and End report service");

        jLabel7.setText("Enter between 2-4 inclusive");

        javax.swing.GroupLayout ChoreDividerLayout = new javax.swing.GroupLayout(ChoreDivider);
        ChoreDivider.setLayout(ChoreDividerLayout);
        ChoreDividerLayout.setHorizontalGroup(
            ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoreDividerLayout.createSequentialGroup()
                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(ChoreDividerLayout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChoreDividerLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ChoreDividerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(ChoreDividerLayout.createSequentialGroup()
                                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(NumPeopleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 159, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(CompletedTaskNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ChoreDividerLayout.createSequentialGroup()
                                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numPeopleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(ChoreDividerLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(FinalReportButton))
                                    .addGroup(ChoreDividerLayout.createSequentialGroup()
                                        .addComponent(NumPeopleButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ReportButton1))))
                            .addGroup(ChoreDividerLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(StartButtom)
                                .addGap(42, 42, 42)
                                .addComponent(idlabel)))))
                .addContainerGap())
        );
        ChoreDividerLayout.setVerticalGroup(
            ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoreDividerLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1)
                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChoreDividerLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NumPeopleLabel)))
                    .addGroup(ChoreDividerLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StartButtom, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CompletedTaskNumTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ReportButton1)
                    .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numPeopleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(NumPeopleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ChoreDividerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FinalReportButton)
                    .addComponent(ResultLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SmartServices.addTab("Service-1", ChoreDivider);

        jLabel2.setText("FlightEmissionCalculator: Bi-directional service");

        service2TextArea.setColumns(20);
        service2TextArea.setRows(5);
        jScrollPane2.setViewportView(service2TextArea);

        ResultLabel1.setText("Output");

        StartButton.setText("START SERVER");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        NextCityLabel.setText("Enter city name to calculate flight emission");

        SupportedCityLabel.setText("Supported cities: Dublin, London, Tokyo, Paris");

        NextCityNameTextField.setText(" ");

        NextCityNameEnterButton.setText("ENTER");
        NextCityNameEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextCityNameEnterButtonActionPerformed(evt);
            }
        });

        CompletedButton.setText("COMPLETE");
        CompletedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompletedButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Press COMPLETE button to end service");

        javax.swing.GroupLayout FlightEmissionCalculatorLayout = new javax.swing.GroupLayout(FlightEmissionCalculator);
        FlightEmissionCalculator.setLayout(FlightEmissionCalculatorLayout);
        FlightEmissionCalculatorLayout.setHorizontalGroup(
            FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                .addGroup(FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                        .addGroup(FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                                .addGap(144, 144, 144)
                                .addComponent(jLabel2))
                            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ResultLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                        .addComponent(NextCityLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                        .addComponent(SupportedCityLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addContainerGap())
                    .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                        .addComponent(NextCityNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(NextCityNameEnterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                        .addComponent(CompletedButton)
                        .addGap(21, 21, 21))))
            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                .addGap(172, 172, 172)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        FlightEmissionCalculatorLayout.setVerticalGroup(
            FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FlightEmissionCalculatorLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(NextCityLabel)
                .addGap(14, 14, 14)
                .addGroup(FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SupportedCityLabel)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(FlightEmissionCalculatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NextCityNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NextCityNameEnterButton)
                    .addComponent(CompletedButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(ResultLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SmartServices.addTab("Service-2", FlightEmissionCalculator);

        jLabel3.setText("StoreMonitoring: Server streaming service");

        service3TextArea.setColumns(20);
        service3TextArea.setRows(5);
        jScrollPane3.setViewportView(service3TextArea);

        ResultLabel2.setText("Output");

        StartButton1.setText("START SERVER");
        StartButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButton1ActionPerformed(evt);
            }
        });

        SectionNameLabel.setText("Enter available store section name to monitor");

        EnterButton.setText("ENTER");
        EnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnterButtonActionPerformed(evt);
            }
        });

        SectionNameTextField.setText(" ");
        SectionNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SectionNameTextFieldActionPerformed(evt);
            }
        });

        jLabel8.setText("Available sections: Beverages, Dairy, Stationary,  Bakery");

        javax.swing.GroupLayout StoreMonitoringLayout = new javax.swing.GroupLayout(StoreMonitoring);
        StoreMonitoring.setLayout(StoreMonitoringLayout);
        StoreMonitoringLayout.setHorizontalGroup(
            StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                .addGroup(StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(StoreMonitoringLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                                .addComponent(SectionNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(EnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(SectionNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(StoreMonitoringLayout.createSequentialGroup()
                        .addGroup(StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ResultLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8))
                            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                                .addGap(221, 221, 221)
                                .addComponent(StartButton1))
                            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                                .addGap(166, 166, 166)
                                .addComponent(jLabel3)))
                        .addGap(0, 196, Short.MAX_VALUE)))
                .addContainerGap())
        );
        StoreMonitoringLayout.setVerticalGroup(
            StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StoreMonitoringLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StartButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SectionNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(StoreMonitoringLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SectionNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(EnterButton))
                .addGap(18, 18, 18)
                .addComponent(ResultLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        SmartServices.addTab("Service-3", StoreMonitoring);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(SmartServices, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(SmartServices, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numPeopleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPeopleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numPeopleTextFieldActionPerformed

    private void NumPeopleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumPeopleButtonActionPerformed
        if(ChoreClient.requestObserver == null){
           serviceTextArea.setText("Start the SERVER first");
           return;
        }
        boolean exceptionOccured;
        serviceTextArea.setText("");
        try { 
            //removed request building and calling stub and sending to server code from here
            //instead here calls requestChoreDivide method on client, so client will
            //send this request to server directly
            //inside requestChoreDivide method, unary service will start
            int numPeople = Integer.parseInt(numPeopleTextField.getText().trim());
            exceptionOccured = myE.isValidNumber(numPeople, serviceTextArea);
            if(exceptionOccured){
            return;
            }
            ChoreClient.requestChoreDivide(numPeople, serviceTextArea );
            }catch(Exception e){
                 serviceTextArea.setText("Exception occured " + e.getMessage());
            }//catch
    }//GEN-LAST:event_NumPeopleButtonActionPerformed

    private void StartButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtomActionPerformed
        
      if(ChoreServer.serverStarted){
            serviceTextArea.setText("Server already started ");
            return;
        }
        //Starting new thread in the background to allow GUI performance.
        Thread serverThread = new Thread(new Runnable(){
            @Override
            public void run(){
                new ChoreServer().startServer();
            }
        });
        serverThread.start();
        serviceTextArea.setText("Server started.");
        //waiting briefly until server ready
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }

        serviceTextArea.append("\nDiscovering service...");
        try {
            //discover service from client
            ChoreClient.discoverAndStart(serviceTextArea);
            //serviceTextArea.setText(ChoreClient.message);
        } catch (IOException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_StartButtomActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        //Starting new thread in the background to allow GUI performance.
        if(FlightServer.serverStarted){
            service2TextArea.setText("Server already started ");
            return;
        }
        Thread serverThread = new Thread(new Runnable(){
            @Override
            public void run(){
                try {
                    new FlightServer().startServer();
                } catch (Exception ex) {
                    Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        serverThread.start();
       
        service2TextArea.setText("Server started.");
        //waiting briefly until server ready
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }

        service2TextArea.append("\nDiscovering service...");
        try {
            //discover service from client
            FlightClient.discoverAndStart(service2TextArea);
            //serviceTextArea.setText(ChoreClient.message);
        } catch (IOException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_StartButtonActionPerformed

    private void NextCityNameEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextCityNameEnterButtonActionPerformed
       if(FlightClient.requestObserver == null){
           service2TextArea.setText("Start the SERVER first");
           return;
       }
       boolean exceptionOccured;
        //button for user input- city
        //when this button clicked, server recieves city name, sends back total emission every time
        //because it is bi directional
        //even user enters wrong city name, server sends reply by saying wrong name, total emission is
        //same as before
        //ExceptionHandling myE = new ExceptionHandling();
        String nextCity = NextCityNameTextField.getText().trim();
        exceptionOccured = myE.isValidName(nextCity, service2TextArea);
        if(exceptionOccured){
        return;
        }
        try{
            //creating CO2Request type request using newBuilder and setting user input city to it.
            CO2Request request = CO2Request.newBuilder().setNextCity(nextCity).build();
            //here, existing requestObserver on Client code, we calling onNext()
            //to send request to server
            FlightClient.requestObserver.onNext(request);
            Thread.sleep(500);

        }catch(InterruptedException | IllegalStateException e)
        {
            service2TextArea.setText("Exception occured " + e.getMessage());
        }

    }//GEN-LAST:event_NextCityNameEnterButtonActionPerformed

    private void CompletedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletedButtonActionPerformed
        if(FlightClient.requestObserver == null){
                  service2TextArea.setText("Start the SERVER first");
                  return;
       }        
        //client sends requests and gets replies
        //here when client finishes its requests, client calls onCompleted()
        //on response observer, when onCompleted is called, it will print 
        //all previous responses from server all at once
        try{
        FlightClient.requestObserver.onCompleted();
        }catch(IllegalStateException e){
         service2TextArea.setText("Exception occured " + e.getMessage());

        }
        
    }//GEN-LAST:event_CompletedButtonActionPerformed

    private void StartButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButton1ActionPerformed
        
        if(StoreMonitoringServer.serverStarted){
            service3TextArea.setText("Server already started ");
            return;
        }
        //Starting new thread in the background to allow GUI performance.
        Thread serverThread = new Thread(new Runnable(){
            @Override
            public void run(){
                new StoreMonitoringServer().startServer();
            }
        });
        serverThread.start();
        service3TextArea.setText("Server started.");
        //waiting briefly until server ready
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }

        service3TextArea.append("\nDiscovering service...");
        try {
            //discover service from client
            StoreMonitoringClient.discoverAndStart(service3TextArea);
            //serviceTextArea.setText(ChoreClient.message);
        } catch (IOException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_StartButton1ActionPerformed

    private void EnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnterButtonActionPerformed

        boolean exceptionOccured;
        if(!StoreMonitoringServer.serverStarted){
            service3TextArea.setText("Start the SERVER first. ");
            return;
        }
        
        String sectionName = SectionNameTextField.getText().trim();
        exceptionOccured = myE.isValidSectionName(sectionName, service3TextArea);
        if(exceptionOccured){
            return;
        }
        service3TextArea.setText("" );

        try {

            MonitoringRequest request = MonitoringRequest
            .newBuilder().setSectionName(sectionName).build();

        //removed response observer from this code, now sending request to Client
        //calling doStoreMonitoring method, in this method client creates response observer
        //can calls method on server and passes this request and response observer
        //to server from client side code
        //to print responses on response observer, here also sends serviceTextArea
            StoreMonitoringClient.doStoreMonitoring(request, service3TextArea);

        } catch (InterruptedException ex) {
            Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    //commented out to keep server alive    
//        finally {
//            try {
//                StoreMonitoringClient.channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(ClientMainGuiController.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }

    }//GEN-LAST:event_EnterButtonActionPerformed

    private void SectionNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SectionNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SectionNameTextFieldActionPerformed

    private void CompletedTaskNumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompletedTaskNumTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CompletedTaskNumTextFieldActionPerformed

    private void ReportButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportButton1ActionPerformed

       if(ChoreClient.requestObserver == null){
           serviceTextArea.setText("Start the SERVER first");
           return;
       }
       if(ChoreClient.streamIsCompleted){
            serviceTextArea.setText("Stream is already completed ");
            return;
       }
       boolean exceptionOccured;
       try{
        int completedTaskNum = Integer.parseInt(CompletedTaskNumTextField.getText().trim());
        exceptionOccured = myE.isValidTaskID(completedTaskNum, serviceTextArea);
        if(exceptionOccured){
        return;
        }
        ReportRequest request = ReportRequest.newBuilder().setCompletedTaskID(completedTaskNum).build();
        ChoreClient.requestObserver.onNext(request);
        serviceTextArea.setText("Request sent: completed task number " + completedTaskNum );
       }catch(NumberFormatException e){
        serviceTextArea.setText("Exception occured " + e.getMessage() );

       }   
        //requestObserver will come when Client calls doChoreReport()
        //requestObserver = stubAsync.doChoreReport(responseObserver);

        //this method gives back request observer to client
        //whenever client send request
        //using onNext, server can catch several requests and possibly store them.
        //in our case, here, client is sending multiple requests onNext()
        //when request is done it calls onCompleted()- onCompleted will be called when user 
        //clicks on GET REPORT button
        //when server knows it is completed, it starts calculating requests and sends
        //back response using response observer
        
        //response observer is defined in ChoreClient.java code

      
    }//GEN-LAST:event_ReportButton1ActionPerformed

    private void FinalReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalReportButtonActionPerformed

       if(ChoreClient.requestObserver == null){
           serviceTextArea.setText("Start the SERVER first");
           return;
       }
       if(ChoreClient.streamIsCompleted){
            serviceTextArea.setText("Stream is already completed ");
            return;
       }
        //here should call onCompleted() on request observer
        ChoreClient.requestObserver.onCompleted();

    }//GEN-LAST:event_FinalReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientMainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientMainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientMainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientMainGuiController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientMainGuiController().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChoreDivider;
    private javax.swing.JButton CompletedButton;
    private javax.swing.JTextField CompletedTaskNumTextField;
    private javax.swing.JButton EnterButton;
    private javax.swing.JButton FinalReportButton;
    private javax.swing.JPanel FlightEmissionCalculator;
    private javax.swing.JLabel NextCityLabel;
    private javax.swing.JButton NextCityNameEnterButton;
    private javax.swing.JTextField NextCityNameTextField;
    private javax.swing.JButton NumPeopleButton;
    private javax.swing.JLabel NumPeopleLabel;
    private javax.swing.JButton ReportButton1;
    private javax.swing.JLabel ResultLabel;
    private javax.swing.JLabel ResultLabel1;
    private javax.swing.JLabel ResultLabel2;
    private javax.swing.JLabel SectionNameLabel;
    private javax.swing.JTextField SectionNameTextField;
    private javax.swing.JTabbedPane SmartServices;
    private javax.swing.JButton StartButtom;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton StartButton1;
    private javax.swing.JPanel StoreMonitoring;
    private javax.swing.JLabel SupportedCityLabel;
    private javax.swing.JLabel idlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField numPeopleTextField;
    private javax.swing.JTextArea service2TextArea;
    private javax.swing.JTextArea service3TextArea;
    private javax.swing.JTextArea serviceTextArea;
    // End of variables declaration//GEN-END:variables
}
