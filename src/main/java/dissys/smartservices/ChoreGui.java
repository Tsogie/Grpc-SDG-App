package dissys.smartservices;

//import static dissys.chore.ChoreClient.stubAsync;
import grpc.generated.chore.ChoreRequest;
import grpc.generated.chore.ChoreResponse;
import grpc.generated.chore.ReportRequest;
import grpc.generated.chore.ReportResponse;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.time.LocalTime;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Tsogzolmaa;
 */
public class ChoreGui extends javax.swing.JFrame {

    /**
     * Creates new form Gui
     */
    public ChoreGui() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        NumPeopleLabel = new javax.swing.JLabel();
        numPeopleTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        serviceTextArea = new javax.swing.JTextArea();
        NumPeopleButton = new javax.swing.JButton();
        StartButtom = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ReportButton = new javax.swing.JButton();
        resultLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        NumPeopleLabel.setText("Enter the number of people");

        numPeopleTextField.setText(" ");
        numPeopleTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numPeopleTextFieldActionPerformed(evt);
            }
        });

        serviceTextArea.setColumns(20);
        serviceTextArea.setRows(5);
        jScrollPane1.setViewportView(serviceTextArea);

        NumPeopleButton.setText("ENTER");
        NumPeopleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumPeopleButtonActionPerformed(evt);
            }
        });

        StartButtom.setText("START");
        StartButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtomActionPerformed(evt);
            }
        });

        jLabel1.setText("To get report click on GET REPORT button");

        ReportButton.setText("GET REPORT");
        ReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReportButtonActionPerformed(evt);
            }
        });

        resultLabel.setText("Result");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(NumPeopleButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(numPeopleTextField)
                        .addComponent(NumPeopleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ReportButton)
                        .addGap(73, 73, 73))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(StartButtom)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(StartButtom)
                .addGap(18, 18, 18)
                .addComponent(NumPeopleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numPeopleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumPeopleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReportButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultLabel)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void numPeopleTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numPeopleTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numPeopleTextFieldActionPerformed

    private void NumPeopleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumPeopleButtonActionPerformed
        try { 
            int numPeople = Integer.parseInt(numPeopleTextField.getText().trim());
            //client creates request using newBuilder() instead of constructor and sets number here
            ChoreRequest request = ChoreRequest.newBuilder().setNumPeople(numPeople).build();
            //then calling doChoreDivide() method on server using stub. and gets back one response
            ChoreResponse response = ChoreClient.stub.doChoderDivide(request); 
            //from that response gets chore result and prints it on text area
            serviceTextArea.setText("Response from server " + response.getChoreResult());
        }catch(Exception e){
        serviceTextArea.setText("Exception occured " + e.getMessage());
        }
    }//GEN-LAST:event_NumPeopleButtonActionPerformed

    private void StartButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtomActionPerformed
        //Starting new thread in the background to allow GUI performance.
        Thread serverThread = new Thread(new Runnable(){
            @Override
            public void run(){
            new ChoreServer().startServer();
            }
        });
        serverThread.start();
        serviceTextArea.setText("Server started.");
        //waiting briefly until server ready
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            Logger.getLogger(ChoreGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        serviceTextArea.append("\nDiscovering service...");
        try {
            //discover service from client
            ChoreClient.discoverAndStart(serviceTextArea);
            //serviceTextArea.setText(ChoreClient.message);
        } catch (IOException ex) {
            Logger.getLogger(ChoreGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(ChoreGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
     
        
    }//GEN-LAST:event_StartButtomActionPerformed

    private void ReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReportButtonActionPerformed
        
        //when user clicks on report button
        //client 
        StreamObserver<ReportResponse> responseObserver = 
                new StreamObserver<ReportResponse>(){
            @Override
            public void onNext(ReportResponse v) {
                serviceTextArea.setText("Response from server (Client streaming, Chore Report): " + v.getReportResult());
            }                
            @Override
            public void onError(Throwable thrwbl) {
                serviceTextArea.setText("Error occurred during stream: " + thrwbl.getMessage());
                thrwbl.printStackTrace();            
            }

            @Override
            public void onCompleted() {
                serviceTextArea.append("\n" + LocalTime.now().toString() + "\nReport is completed");
            }
        };

    //for this doChoreReport service, assynchronous stub is used because, we are sending
    //stream of request to server.
    //here using stubAsync, method doChoreReport is triggers server and responseObserver,
    //we defined its behaviour in this client class, is sent to server as a parameter. 
    //this method gives back request observer to client
    //whenever client send request
    //using onNext, server can catch several requests and possibly store them.
    //in our case, here, client is sending multiple requests onNext()
    //when request is done it calls onCompleted()
    //when server knows it is completed, it starts calculating requests and sends
    //back response using response observer
        StreamObserver<ReportRequest> requestObserver = ChoreClient
                .stubAsync
                .doChoreReport(responseObserver);
    
        try{
            requestObserver.onNext(ReportRequest.newBuilder().setCompletedTaskNum(11).build());
            Thread.sleep(500);
            requestObserver.onNext(ReportRequest.newBuilder().setCompletedTaskNum(1).build());
            Thread.sleep(500);
            requestObserver.onNext(ReportRequest.newBuilder().setCompletedTaskNum(6).build());
            Thread.sleep(500);
            requestObserver.onNext(ReportRequest.newBuilder().setCompletedTaskNum(3).build());
            Thread.sleep(500);
            requestObserver.onNext(ReportRequest.newBuilder().setCompletedTaskNum(4).build());
            Thread.sleep(500);
         
            requestObserver.onCompleted();

//            Thread.sleep(10000);
        
        }catch(InterruptedException e){
            serviceTextArea.setText("Exception: " + e.getMessage());
        }
    }//GEN-LAST:event_ReportButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChoreGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChoreGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChoreGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChoreGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ChoreGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NumPeopleButton;
    private javax.swing.JLabel NumPeopleLabel;
    private javax.swing.JButton ReportButton;
    private javax.swing.JButton StartButtom;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField numPeopleTextField;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JTextArea serviceTextArea;
    // End of variables declaration//GEN-END:variables
}
